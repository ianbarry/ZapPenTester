using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using ZAPPenTester.Interfaces;
using ZAPPenTester.Models;

namespace ZAPPenTester
{
    /// <summary>
    /// This class is responsible for managing the ZAP application.
    /// The functionality of the tool relies on the application being running, because the API is not available when ZAP is not running.
    /// </summary>
    public class Zap
    {
        private Process process;
        private readonly ISettings settings;
        private readonly ILogger logger;
        private readonly IScanner scanner;
        private readonly IReporting reporting;
        private readonly ISpider spider;
        private readonly ZapScan _zapScan;

        public int sleepTimeBetweenRequests = 15000;

        public Zap(ISettings settings, ILogger logger, IScanner scanner, IReporting reporting, ISpider spider, ZapScan zapScan)
        {
            this.settings = settings;
            this.logger = logger;
            this.scanner = scanner;
            this.reporting = reporting;
            this.spider = spider;
            _zapScan = zapScan;
        }

        public void Open()
        {
            logger.Log("Opening ZAP");
            process = new Process
            {
                StartInfo =
                {
                    FileName = settings.ZapStartFile,
                    WorkingDirectory = settings.ZapWorkingDirectory,
                    Arguments = "-daemon"
                }
            };

            process.Start();
            process.WaitForExit();
            
            Thread.Sleep(sleepTimeBetweenRequests);
        }

        public void Close()
        {
            logger.Log("Closing ZAP");

            if (process.HasExited)
            {
                return;
            }

            process.Kill();
        }

        public void Scan()
        {
            if (_zapScan.ScanType == ScanType.Spider)
            {
                if (!spider.Start(_zapScan.Urls))
                {
                    return;
                }

                do
                {
                    Thread.Sleep(sleepTimeBetweenRequests);
                }
                while (!spider.HasCompleted()); 
            }

            if (_zapScan.ScanType == ScanType.ActiveScan)
            {
                if (!scanner.Scan(_zapScan.Urls))
                {
                    return;
                }

                do
                {
                    Thread.Sleep(sleepTimeBetweenRequests);
                }
                while (!scanner.HasCompleted()); 
            }

            logger.Log("Scan complete");
        }

        public IEnumerable<Report> GetReports()
        {
            foreach (var url in _zapScan.Urls)
            {
                logger.Log($"Generating report for {url}");
                yield return reporting.GetReport(url);
            }
        }
    }
}