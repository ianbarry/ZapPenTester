using System;
using System.Collections.Generic;
using Newtonsoft.Json;

using ZAPPenTester.Interfaces;

namespace ZAPPenTester
{
    /// <summary>
    /// This class is responsible for interfacing the ZAP spider funcionality like starting the spider and checking the status of the spider.
    /// The spider is the part of ZAP that, given a URL, crawls the url and all pages linked to it, and their children, and their children, ...
    /// </summary>
    public class Spider : ISpider
    {
        private const string spiderComplete = "100";
        private const string spiderStarted = "OK";

        private readonly ISettings settings;
        private readonly ILogger logger;
        private readonly IHttpClientHelper httpClientHelper;

        public Spider(ISettings settings, ILogger logger, IHttpClientHelper httpClientHelper)
        {
            this.settings = settings;
            this.logger = logger;
            this.httpClientHelper = httpClientHelper;
        }

        public bool Start(IEnumerable<string> urls)
        {
            foreach (var url in urls)
            {
                logger.Log($"Starting spider for {url}");

                string response = httpClientHelper.MakeHttpRequest(settings.ZapSpiderUrl.Replace("##", url), HttpResponseType.json);

                if (response == null)
                {
                    break;
                }

                dynamic jsonResponse = JsonConvert.DeserializeObject(response);
                
                if (jsonResponse.Result.ToString().ToUpper() != spiderStarted)
                {
                    logger.Log($"Spider failed for {url}");
                    return false;
                }
            }

            return false;
        }

        public bool HasCompleted()
        {
            string response = httpClientHelper.MakeHttpRequest(settings.ZapSpiderStatusUrl, HttpResponseType.json);

            if (response != null)
            {
                dynamic jsonResponse = JsonConvert.DeserializeObject(response);
                logger.Log(String.Format("Spider progress: {0}%", jsonResponse.status.ToString()));

                return jsonResponse.status.ToString() == spiderComplete;
            }

            return false;
        }
    }
}