using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;

using ZAPPenTester.Interfaces;
using ZAPPenTester.Models;

namespace ZAPPenTester
{
    /// <summary>
    /// This class is responsible for reading the findings of a ZAP scan and converting them to a known format.
    /// </summary>
    public class Reporting : IReporting
    {
        private readonly ISettings settings;
        private readonly ILogger logger;
        private readonly IHttpClientHelper httpClientHelper;

        public Reporting(ISettings settings, ILogger logger, IHttpClientHelper httpClientHelper)
        {
            this.settings = settings;
            this.logger = logger;
            this.httpClientHelper = httpClientHelper;
        }

        public Report GetReport(string url)
        {
            logger.Log("Preparing report");

            string response = httpClientHelper.MakeHttpRequest(settings.ZapReportUrl, HttpResponseType.xml);

            if (response != null)
            {
                XDocument document = XDocument.Parse(response);

                IEnumerable<XElement> elements = document.Element("OWASPZAPReport").Elements("site").Where(e => e.Attribute("host").Value == new Uri(url).Host);

                var issues = new List<Issue>();
                foreach(XElement element in elements)
                {
                    issues.AddRange(
                        from e in element.Descendants("alertitem")
                        select new Issue
                        {
                            IssueDescription = e.Element("alert").Value,
                            RiskDescription = e.Element("riskdesc").Value,
                            TargetUrl = url,
                            OriginalSiteUrl = element.Attribute("name").Value
                        });
                }

                return new Report (url, issues);
            }

            return null;
        }
    }
}