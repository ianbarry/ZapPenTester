using System;
using System.Collections.Generic;
using Microsoft.CSharp.RuntimeBinder;
using Newtonsoft.Json;

using ZAPPenTester.Interfaces;

namespace ZAPPenTester
{
    /// <summary>
    /// This class is responsible for interfacing the ZAP scanner funcionality like starting the scan and checking the status of the scan.
    /// The scanner is the part of ZAP that finds problems in the pages crawled by the spider.
    /// </summary>
    public class Scanner : IScanner
    {
        private const string scanComplete = "100";
        private const string scanStarted = "OK";
        private const string scanInProgress = "scan_in_progress";

        private readonly ISettings settings;
        private readonly ILogger logger;
        private readonly IHttpClientHelper httpClientHelper;

        public Scanner(ISettings settings, ILogger logger, IHttpClientHelper httpClientHelper)
        {
            this.settings = settings;
            this.logger = logger;
            this.httpClientHelper = httpClientHelper;
        }

        public bool HasCompleted()
        {
            string response = httpClientHelper.MakeHttpRequest(settings.ZapScanStatusUrl, HttpResponseType.json);

            if (response!= null)
            {
                dynamic jsonResponse = JsonConvert.DeserializeObject(response);
                logger.Log(String.Format("Scan progress: {0}%", jsonResponse.status.ToString()));

                return jsonResponse.status.ToString() == scanComplete;
            }

            return false;
        }

        public bool Scan(IEnumerable<string> urls)
        {
            foreach (var url in urls)
            {
                logger.Log($"Starting scan for {url}");

                string response = httpClientHelper.MakeHttpRequest(settings.ZapScanUrl.Replace("##", url), HttpResponseType.json);

                if (response == null)
                {
                    break;
                }

                dynamic jsonResponse = JsonConvert.DeserializeObject(response);

                if (!HasStarted(jsonResponse))
                {
                    logger.Log($"Scan failed for {url}");
                    return false;
                }
            }

            return false;
        }

        private bool HasStarted(dynamic jsonResponse)
        {
            try
            {
                return jsonResponse.Result.ToString().ToUpper() == scanStarted;
            }
            catch (RuntimeBinderException) { }

            try
            {
                return jsonResponse.code.ToString() == scanInProgress;
            }
            catch (RuntimeBinderException) { }

            return false;
        }
    }
}