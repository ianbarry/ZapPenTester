using FakeItEasy;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using ZAPPenTester.Interfaces;

namespace ZAPPenTester.Tests
{
    [TestClass]
    public class SpiderTests
    {
        [TestMethod]
        public void Start_NullResponse_ReturnsFalse()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var spider = new Spider(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);

            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, A<HttpResponseType>.Ignored)).Returns(null);

            bool hasStarted = spider.Start(new[] { "http://localhost/" });

            Assert.AreEqual(false, hasStarted);
        }

        [TestMethod]
        public void Start_NotStarted_ReturnsFalse()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var spider = new Spider(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);
            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, A<HttpResponseType>.Ignored)).Returns("{\"Result\":\"0\"}");

            bool hasStarted = spider.Start(new[] { "http://localhost/" });

            Assert.AreEqual(false, hasStarted);
        }

        [TestMethod]
        public void Start_Started_ReturnsTrue()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var spider = new Spider(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);
            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, HttpResponseType.json)).Returns("{\"Result\":\"OK\"}");

            bool hasStarted = spider.Start(new[] { "http://localhost/" });

            Assert.AreEqual(true, hasStarted);
        }

        [TestMethod]
        public void HasCompleted_NullResponse_ReturnsFalse()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var scanner = new Scanner(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);
            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, HttpResponseType.json)).Returns(null);

            bool hasCompleted = scanner.HasCompleted();

            Assert.AreEqual(false, hasCompleted);
        }

        [TestMethod]
        public void HasCompleted_NotComplete_ReturnsFalse()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var spider = new Spider(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);
            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, HttpResponseType.json)).Returns("{\"status\":\"23\"}");

            bool hasCompleted = spider.HasCompleted();

            Assert.AreEqual(false, hasCompleted);
        }

        [TestMethod]
        public void HasCompleted_Complete_ReturnsTrue()
        {
            var httpClientHelper = A.Fake<IHttpClientHelper>();
            var spider = new Spider(A.Fake<ISettings>(), A.Fake<ILogger>(), httpClientHelper);
            A.CallTo(() => httpClientHelper.MakeHttpRequest(A<string>.Ignored, HttpResponseType.json)).Returns("{\"status\":\"100\"}");

            bool hasCompleted = spider.HasCompleted();

            Assert.AreEqual(true, hasCompleted);
        }
    }
}
