using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using ZAPPenTester.Models;

namespace ZAPPenTester.Tests
{
    [TestClass]
    public class CommandLineReportPrinterTests
    {
        [TestMethod]
        public void AggregateReport_WhenNullReport_ReturnsNull()
        {
            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(null);

            Assert.IsNull(groupedIssues);
        }

        [TestMethod]
        public void AggregateReport_WhenOneReportItem_ReturnsOneGroupedIssue()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue> { new Issue { IssueDescription = "Desc" } };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(1, groupedIssues.Count());
        }

        [TestMethod]
        public void AggregateReport_WhenOneReportItem_ReturnsOneGroupedIssueWithSameDescription()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue> { new Issue { IssueDescription = "Desc" } };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual("Desc", groupedIssues.ToList()[0].IssueDescription);
        }

        [TestMethod]
        public void AggregateReport_WhenOneReportItemWithOneEntry_ReturnsOneGroupedIssueWithCountOne()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue> { new Issue { IssueDescription = "Desc" } };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(1, groupedIssues.Count());
        }

        [TestMethod]
        public void AggregateReport_WhenOneReportItemWithThreeEntries_ReturnsOneGroupedIssueWithCountThree()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue>
                             {
                                 new Issue { IssueDescription = "Desc" }, 
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc" }
                             };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(3, groupedIssues.ToList()[0].IssueCount);
        }

        [TestMethod]
        public void AggregateReport_WhenTwoReportItems_ReturnsTwoGroupedIssues()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue>
                             {
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc2" }
                             };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(2, groupedIssues.Count());
        }

        [TestMethod]
        public void AggregateReport_WhenTwoReportItemsWithTwoEntries_ReturnsTowGroupedIssuesWithSameDescription()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue>
                             {
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc2" }
                             };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual("Desc", groupedIssues.ToList()[0].IssueDescription);
            Assert.AreEqual("Desc2", groupedIssues.ToList()[1].IssueDescription);
        }

        [TestMethod]
        public void AggregateReport_WhenTwoReportItemsWithOneEntry_ReturnsTowGroupedIssuesWithCountOne()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue>
                             {
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc2" }
                             };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(1, groupedIssues.ToList()[0].IssueCount);
            Assert.AreEqual(1, groupedIssues.ToList()[1].IssueCount);
        }

        [TestMethod]
        public void AggregateReport_WhenTwoReportItemsWithTwoEntries_ReturnsTowGroupedIssuesWithCountTwo()
        {
            var report = new Report("http://localhost/", new List<Issue>());
            var issuesList = new List<Issue>
                             {
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc" },
                                 new Issue { IssueDescription = "Desc2" }
                             };
            report.Issues = issuesList;

            IEnumerable<IssueGrouped> groupedIssues = new CommandLineReportPrinter().AggregateReport(report);

            Assert.AreEqual(2, groupedIssues.ToList()[0].IssueCount);
            Assert.AreEqual(1, groupedIssues.ToList()[1].IssueCount);
        }

    }
}
